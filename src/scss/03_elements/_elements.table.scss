.lia-table {
  border-collapse: separate;
  border-spacing: 0;

  &-responsive {
    display: block;
    max-height: 70vh;
    overflow: auto;
    width: 100%;
  }

  &__head {
    border-bottom: $global-border;
    display: flex;
    position: sticky;
    top: 0;
    z-index: 3;

    th {
      background: white;
      position: sticky;
      top: 0;
      z-index: 1;

      &:first-child {
        left: 0;
        position: sticky;
        z-index: 2;
      }
    }
  }

  &__row {
    display: block;

    &:first-of-type > td {
      border-top: 0;
    }

    &:last-child {
      border-bottom: $global-border;
    }

    &:hover {
      background-color: rgba(var(--color-highlight), 0.05);
      cursor: pointer;

      > td {
        background-color: rgba(var(--color-highlight), 0.05);

        &:first-child::before {
          background-color: rgba(var(--color-highlight), 0.1);
        }
      }
    }
  }

  &__header {
    align-items: center;
    display: flex;
    border-top: $global-border;
    border-left: 0;
    border-bottom: 0;
    border-right: $global-border;

    &:first-child {
      border-left: $global-border;
      border-right: $global-border;
    }

    &:last-child {
      border-right: $global-border;
    }
  }

  &__data {
    border: $global-border;
    border-top: $global-border;
    border-left: 0;
    border-bottom: 0;
    border-right: $global-border;

    &:first-child {
      border-left: $global-border;
      border-right: $global-border;
      background-color: white;
      left: 0;
      position: sticky;
      z-index: 2;

      /* 
       * Fix layering and opacity problems if <tr> is hovered.
       * Makes sure that any <td> is not visible (behind first, sticky <td>)
       * if table is scrolled horizontally.
       */

      &:before,
      &:after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        background-color: white;
        height: 100%;
      }

      &:before {
        z-index: -1;
      }

      &:after {
        z-index: -2;
      }
    }
  }

  &__header,
  &__data {
    padding: 1rem 3.2rem 1rem 1.6rem;
    vertical-align: top;
    width: 13.5rem;
  }

  &__sort {
    margin-left: auto;
    position: absolute;
    right: 2px;

    &.active {
      color: rgb(var(--color-highlight));
    }
  }
}

.lia-survey-matrix {
  border-spacing: 0 map-get($global-spacing, spacing-large);

  :not(:first-child) {
    td:last-child {
      padding: map-get($global-spacing, spacing-normal)
        map-get($global-spacing, spacing-large);
    }

    td:not(:last-child) {
      padding: map-get($global-spacing, spacing-normal);
    }
  }

  :first-child td {
    padding: 0 map-get($global-spacing, spacing-normal);
  }
}

@mixin style-table($theme) {
  .lia-table {
    $bg: map-get($theme, background);
    $fg: color-contrast($bg);
    $head-bg: mix($bg, $fg, 100%);
    $row-even-bg: mix($bg, $fg, 95%);
    $row-odd-bg: mix($bg, $fg, 100%);
    $head-fg: color-contrast($head-bg);
    $row-even-fg: color-contrast($row-even-bg);
    $row-odd-fg: color-contrast($row-odd-bg);
    $border-color: mix($bg, $fg, 75%);

    .lia-table-head {
      th {
        border-color: $border-color !important;
      }

      background: $head-bg;
      color: $head-fg;
    }

    .lia-table-row {
      td {
        border-color: $border-color;
      }

      &:nth-child(even) {
        background: $row-even-bg;
        color: $row-even-fg;
      }

      &:nth-child(odd) {
        background: $row-odd-bg;
        color: $row-odd-fg;
      }
    }
  }

  .lia-survey-matrix {
    :not(:first-child) {
      td:not(:last-child) {
        $bg: map-get($theme, background);
        $fg: color-contrast($bg);
        background: mix($bg, $fg, 95%);
      }
    }
  }
}
